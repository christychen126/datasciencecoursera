install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
result <- dbGetQuery(con, "show databases;")
dbDisconect(con)
dbDisconnect(con)
result
source("http://bioconductor.or/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
A=matrix(1:10, nr=5, nc=2)
h5write(A,"example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html<-htmlTreeParse(url, useInternalNodes=T)
library(XML)
html<-htmlTreeParse(url, useInternalNodes=T)
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html<-htmlTreeParse(url, useInternalNodes=T)
htmlCode <- readLines(con = )
library(ggplot2)
str(mpg)
qplot(displ, hwy , data = mpg)
qplot(displ, hwy , data = mpg, col = drv)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets=.~drv,method="loess")
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
swirl()
p
3
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"))
library(swirl)
swirl()
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g
g+ geom_point(aes(color=drv), size = 2, alpha = 1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdata, aes(myx, myy))
g <- ggplot(testdata, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line() + ylim(-3,3)
g + geom_line + coord_cartesian(ylim=c(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(testdat, aes(x=displ, y=hwy, color=factor(year)))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) +geom_smooth(method="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) +geom_smooth(method="lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
skip()
swirl()
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds,bindwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill=cut)
qplot(price,data=diamonds, geom("density"))
qplot(price,data=diamonds, geom="density")
qplot(price,data=diamonds, geom="density", colors=cut)
qplot(price,data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"))
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), facets=.~cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), methods="lm",facets=.~cut)
skip()
swirl()
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"),facets=.~cut)
skip()
swirl()
skip()
skip()
play()
skip()
skip()
setwd("UW MBA Course Work/Dropbox/AnuDocuments/DataScience/datasciencecoursera/GettingAndCleaningData/")
dir()
# download the csv file
if(!file.exists("getdata%2Fdata%2Fss06hid.csv")){
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "getdata_data_ss06hid.csv")
}
# load the data into R
data <- read.csv("getdata_data_ss06hid.csv", stringsAsFactors = FALSE)
head(data)
?strsplit
colnames(data)
data <- read.csv("getdata_data_ss06hid.csv", stringsAsFactors = FALSE)
varNames <- names(data)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
if(!file.exists("getdata_data_GDP.csv")){
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="getdata_data_GDP.csv")
}
# load the data into R
data <- read.csv("getdata_data_GDP.csv", stringsAsFactors = FALSE)
names(data)
head(data)
?gsub
data_ <- data[X!="",]
data_ <- data[,list(X,X.1,X.3,X.4)]
setNames(data_, c("X","X.1","X.3","X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",","",data_$gdp))
mean(gdp, na.rm=TRUE)
data_ <- data[X!="",]
data_ <- data[,list(X,X.1,X.3,X.4)]
data_ <- data[data$X!="",]
data_ <- data[,list(X,X.1,X.3,X.4)]
setNames(data_, c("X","X.1","X.3","X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",","",data_$gdp))
if(!file.exists("getdata_data_GDP.csv")){
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="getdata_data_GDP.csv")
}
data <- read.csv("getdata_data_GDP.csv", stringsAsFactors = FALSE)
data_ <- data[data$X!="",]
data_ <- data[,list(X,X.1,X.3,X.4)]
data_ <- data[,list(data$X,data$X.1,data$X.3,data$X.4)]
gdp <- as.numeric(gsub(",","",data_$X.4))
mean(gdp, na.rm=TRUE)
dim(gdp)
length(gdp)
gdp
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
dir()
getwd()
setwd("UCI HAR Dataset/")
dir()
train <- read.csv("train/X_train.txt")
dim(train)
head(train)
test <- read.table("test/X_test.txt")
dim(test)
train <- read.table("train/X_train.txt")
activityLabels <- read.table("activity_labels.txt")[,2]
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
features <- read.table("features.txt")[,2]
activityLabels
head(features)
length(features)
class(features)
subject_test <- read.table("test/subject_test.txt")
subject_test
dim(subject_test)
head(subject_test)
subject_train <- read.table("train/subject_train.txt")
head(subject_train)
dim(subject_train)
extract_features <- grepl("mean|std", features)
dim(extract_features)
length(extract_features)
dim(labels())
dim(labels
)
trainData <- read.table("train/X_train.txt")
testData <- read.table("test/X_test.txt")
trainLabels <- read.table("train/Y_train.txt")
testLabels <- read.table("test/Y_test.txt")
subject_train <- read.table("train/subject_train.txt")
subject_test <- read.table("test/subject_test.txt")
# merge the data
data <- rbind(trainData, testData)
labels <- rbind(trainLabels, testLabels)
dim(trainLabels)
head(trainLabels)
names(subject_test)
head(subject_test)
data$labels <- rbind(trainLabels, testLabels)
dim(data)
head(features)
names(data) <- c(features, labels)
dim(data)
names(activityLabels) <- "activity"
head(activityLabels)
activityLabels <- read.table("activity_labels.txt")
names(activityLabels) <- "activity"
head(activityLabels)
activityLabels <- read.table("activity_labels.txt")
names(activityLabels) <- ("activityID", "activityLAbel")
names(activityLabels) <- c("activityID", "activityLAbel")
names(activityLabels) <- c("activityID", "activityLAbel")
head(activityLabels)
features <- read.table("features.txt")[,2]
head(features)
dim(features)
names(features) <- "fea"
head(features)
features <- read.table("features.txt")
extract_features <- grepl("mean|std", features)
activityLabels <- read.table("activity_labels.txt")
names(activityLabels) <- c("activityID", "activityLabel")
data_subset1$activity <- factor(activityLabels$activityID, levels = activities, labels = activityLabels$activityLabel)
data_subset1$activity <- factor(activityLabels$activityID, levels =  activityLabels$activityLabel, labels = activityLabels$activityLabel)
data_subset1$activity <- factor(activityLabels$activityID, levels =  activityLabels$activityLabel, labels = activityLabels$activityLabel)
data <- rbind(trainData, testData)
data$labels <- rbind(trainLabels, testLabels)
# Question 2
# Extracts only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
data_subset1 <- data[, extract_features]
# Question 3
# Uses descriptive activity names to name the activities in the data set
names(data) <- c(features, labels)
data_subset1$activity <- factor(activityLabels$activityID, levels =  activityLabels$activityLabel, labels = activityLabels$activityLabel)
activityLabels$activityID
activityLabels$activityLabel
data_subset1 <- mutate(data_subset1, ActivityLabel = ifelse(labels ==1, WALKING, ifelse(CROPDMGEXP ==2, WALKING_UPSTAIRS, ifelse(CROPDMGEXP == 3, WALKING_DOWNSTAIRS, ifelse(CROPDMGEXP == 4, SITTING)))))
library(dplyr)
data_subset1 <- mutate(data_subset1, ActivityLabel = ifelse(labels ==1, WALKING, ifelse(CROPDMGEXP ==2, WALKING_UPSTAIRS, ifelse(CROPDMGEXP == 3, WALKING_DOWNSTAIRS, ifelse(CROPDMGEXP == 4, SITTING)))))
data_subset1 <- mutate(data_subset1, ActivityLabel = ifelse(labels ==1, "WALKING", ifelse(CROPDMGEXP ==2, "WALKING_UPSTAIRS", ifelse(CROPDMGEXP == 3, "WALKING_DOWNSTAIRS", ifelse(CROPDMGEXP == 4, "SITTING")))))
data_subset1 <- mutate(data_subset1, ActivityLabel = ifelse(labels ==1, "WALKING", ifelse(labels ==2, "WALKING_UPSTAIRS", ifelse(labels == 3, "WALKING_DOWNSTAIRS", ifelse(labels == 4, "SITTING")))))
data_subset1 <- mutate(data_subset1, ActivityLabel = ifelse(labels ==1, "WALKING", ifelse(labels ==2, "WALKING_UPSTAIRS", ifelse(labels == 3, "WALKING_DOWNSTAIRS", ifelse(labels == 4, "SITTING", "STANDING")))))
data_subset1[data_subset1$labels == 1,]$labels = "WALKING"
data_subset1[data_subset1$labels == 1,]$labels <- "WALKING"
class(data_subset1$labels)
data_subset1$labels
data$labels <- rbind(trainLabels, testLabels)
class(data$labels)
data_subset1 <- data[, c(extract_features, labels)]
data_subset1$labels <- data$labels
class(data_subset1$labels)
data_subset1$activityLabels <- ifelse(data_subset1$labels == 1, 'WALKING', ifelse(data_subset1$labels == 2, 'WALKING_UPSTAIRS', ""))
head(data_subset1)
data_subset1 <- data[, extract_features]
data_subset1$labels <- data$labels
dim(data)
mutate(data_subset1, activityLabels = ifelse(data_subset1$labels == 1, 'WALKING', ifelse(data_subset1$labels == 2, 'WALKING_UPSTAIRS', ""))
)
mutate(data_subset1, activityLabels = ifelse(data_subset1$labels == 1, 'WALKING', ifelse(data_subset1$labels == 2, 'WALKING_UPSTAIRS', "")))
data_subset1[data_subset1$labels == 1,]$labels <- "WALKING"
extract_features <- grepl("mean|std", features)
data_subset1 <- data[, extract_features]
data_subset1$subject <- rbind(subject_train, subject_test)
data_subset1$labels <- rbind(trainLabels, testLabels)
tidy_data <- aggregate(data_subset1[, 3:ncol(data_subset1)], by=list(subject = data_subset1$subject,
label = data_subset1$labels), mean)
ncol(data_subset1)
data <- rbind(trainData, testData)
# Question 2
# Extracts only the measurements on the mean and standard deviation for each measurement.
extract_features <- grepl("mean|std", features)
data_subset1 <- data[, extract_features]
data_subset1$subject <- rbind(subject_train, subject_test)
data_subset1$labels <- rbind(trainLabels, testLabels)
dim(data_subset1)
data_subset1 <- data[, extract_features]
dim(data_subset1)
